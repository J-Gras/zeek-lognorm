
module Lognorm;

%%{
#include "LogNormalizer.h"

using namespace plugin::Zeek_Lognorm;
using namespace zeek;

static EventHandlerPtr to_event(Val* evt_val)
    {
    auto evt = evt_val ? evt_val->AsFunc() : nullptr;

    if ( evt )
        {
        // Make sure the event is prototyped as expected
        auto evt_type = evt->GetType()->AsFuncType();
        if ( evt_type->Flavor() != FUNC_FLAVOR_EVENT )
            {
            reporter->Error("event is a function, not an event");
            return nullptr;
            }

        auto evt_args = evt_type->Params();
        if ( (evt_args->NumFields() != 1) ||
             (! IsString(evt_args->GetFieldType(0)->Tag())) )
            {
            reporter->Error("event must take a single argument of type string");
            return nullptr;
            }

        return event_registry->Lookup(evt->Name());
        }

    return nullptr;
    }

%%}

## Creates a log normalizer.
##
## Returns: A log normalizer handle.
##
## .. zeek:see:: lognormalizer_normalize
function lognormalizer_init%(%) : opaque of lognormalizer
    %{
    return make_intrusive<LogNormalizerVal>(new LogNormalizer());
    %}

## Creates a log normalizer that allows to handle unparsed log
## lines using a custom event.
##
## evt: An event to handle unparsed log lines. The event receives
##      a single argument of type string, containing the log line.
##      This approach is used to accomodate distinct events when
##      using multiple lognormalizers.
##
## Returns: A log normalizer handle.
##
## .. zeek:see:: lognormalizer_normalize
function lognormalizer_init_ex%(evt: any%) : opaque of lognormalizer
    %{
    auto* ln = new LogNormalizer(to_event(evt));

    return make_intrusive<LogNormalizerVal>(ln);
    %}

## Loads a rule file in liblognorm format.
##
## ln: The lognormalizer handle.
##
## fn: The rule file name.
##
## Returns: A bool value indicating success.
##
## .. zeek:see:: lognormalizer_init lognormalizer_normalize
function lognormalizer_load_rule_file%(ln: opaque of lognormalizer,
    fn: string%) : bool
    %{
    auto* lnv = static_cast<LogNormalizerVal*>(ln);
    auto* l = lnv->GetNormalizer();
    if ( l )
        {
        bool succ = l->LoadRuleFile(fn->CheckString());
        return val_mgr->Bool(succ);
        }
    return val_mgr->Bool(false);
    %}

## Loads a liblognorm rule (v2 only).
##
## ln: The lognormalizer handle.
##
## s: The rule to load.
##
## Returns: A bool value indicating success.
##
## .. zeek:see:: lognormalizer_init lognormalizer_normalize
function lognormalizer_load_rule%(ln: opaque of lognormalizer,
    s: string%) : bool
    %{
    auto* lnv = static_cast<LogNormalizerVal*>(ln);
    auto* l = lnv->GetNormalizer();
    if ( l )
        {
        bool succ = l->LoadRuleFromString(s->CheckString());
        return val_mgr->Bool(succ);
        }
    return val_mgr->Bool(false);
    %}

## Normalizes a log line. For each tag the matching rule defines,
## the corresponding event will be scheduled. Each field the rule
## defines, will be passed as parameter to the event.
##
## ln: The lognormalizer handle.
##
## s: The log line to normalize.
##
## Returns: A bool value indicating success.
##
## .. zeek:see:: lognormalizer_init lognormalizer_load_rules
function lognormalizer_normalize%(ln: opaque of lognormalizer,
    s: string%): bool
    %{
    LogNormalizerVal* lnv = static_cast<LogNormalizerVal*>(ln);
    LogNormalizer* l = lnv->GetNormalizer();
    bool succ = l->Normalize(s->CheckString());
    return val_mgr->Bool(succ);
    %}
